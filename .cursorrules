# Project Architecture Rules

## Note
- This is a living document
- New rules should be added as they are discovered
- Keep this file updated with any new project settings or constraints

## Language
- All user-facing text in the web interface must be in Korean
- This includes:
  - Error messages
  - Button labels
  - Page titles
  - Form labels
  - Alert messages
  - Confirmation dialogs
- Console logs and technical messages can remain in English

## Modal Design Rules
- All modals should follow the same design pattern:
  - Use `@headlessui/react` Dialog component
  - Background overlay: `bg-black bg-opacity-25`
  - Panel styling: `w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all`
  - Title: `text-lg font-medium leading-6 text-gray-900`
  - Content: `mt-2 text-sm text-gray-500`
  - Warning text: `text-sm text-red-500 mt-2`
  - Button container: `mt-4 flex justify-end space-x-3`
  - Cancel button: `inline-flex justify-center rounded-md border border-transparent bg-gray-100 px-4 py-2 text-sm font-medium text-gray-900 hover:bg-gray-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-gray-500 focus-visible:ring-offset-2`
  - Action button: `inline-flex justify-center rounded-md border border-transparent bg-red-100 px-4 py-2 text-sm font-medium text-red-900 hover:bg-red-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-red-500 focus-visible:ring-offset-2`
  - Include warning text "이 작업은 되돌릴 수 없습니다." for destructive actions
  - Use consistent transition animations

## Database
- Using Prisma with Neon (PostgreSQL) as the cloud database
- Database URL is stored in environment variables
- Models are defined in prisma/schema.prisma

### Models
#### Vote
- Represents a single voting event
- Contains title, type (CELEBRITY/TVSHOW), and date range
- Has many VoteItems (the items being voted on)
- Has many VoteItemVotes (to track votes for its items)

#### VoteItem
- Represents an item that can be voted on
- Contains name, description, and image URL
- Belongs to one Vote
- Has many VoteItemVotes (to track its votes)

#### VoteItemVote
- Tracks individual vote counts for each item in a vote
- Links a VoteItem to a Vote with a vote count
- Has unique constraint on [voteItemId, voteId] to prevent duplicates
- Used to count how many votes each item gets in a specific vote

## File Storage
- Images are stored as URLs in the database
- Image URLs are stored in the VoteItem model's image field
- No local file storage is used

## API Routes
- All API routes are in the app/api directory
- Using Next.js API routes with TypeScript
- Form data is handled using FormData API

## Frontend
- Using Next.js with TypeScript
- Components are in app/components
- Pages are in app directory
- Using Tailwind CSS for styling

## State Management
- Using React hooks for local state
- No global state management library

## Deployment
- Cloud-based deployment (not local)
- Database is hosted on Neon
- No local file system access 