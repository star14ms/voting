generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int        @id @default(autoincrement())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  userVotes     UserVote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vote {
  id           Int            @id @default(autoincrement())
  title        String
  type         String
  image        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  startDate    DateTime       @default(now())
  endDate      DateTime
  userVotes    UserVote[]
  voteItemVote VoteItemVote[]
}

model VoteItem {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  image        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  voteItemVote VoteItemVote[]
}

model VoteItemVote {
  id         Int        @id @default(autoincrement())
  voteItemId Int
  voteId     Int
  voteCount  Int        @default(0)
  userVotes  UserVote[]
  vote       Vote       @relation(fields: [voteId], references: [id])
  voteItem   VoteItem   @relation(fields: [voteItemId], references: [id])

  @@unique([voteItemId, voteId])
}

model UserVote {
  id             Int          @id @default(autoincrement())
  userId         Int
  voteId         Int
  voteItemVoteId Int
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id])
  vote           Vote         @relation(fields: [voteId], references: [id])
  voteItemVote   VoteItemVote @relation(fields: [voteItemVoteId], references: [id])

  @@unique([userId, voteId])
}
